{"version":3,"sources":["components/ContactsForm/ContactsForm.module.css","components/ContactList/ContactList.module.css","redux/phonebook-actions.js","redux/phonebook-reducer.js","redux/store.js","components/ContactsForm/ContactsForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortId","generate","deleteContact","changeFilter","items","createReducer","actions","state","filter","contact","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","phonebookPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","phonebookReducer","devTools","process","persistor","persistStore","ContactsForm","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","some","elm","toLowerCase","alert","this","className","s","form","inputName","type","pattern","title","required","onChange","formBtn","Component","connect","dispatch","target","getFilteredContacts","allContacts","normalizedFilter","includes","onDeleteContact","ContactsList","map","ContactsItem","onClick","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.6050450f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactsForm_form__2aRRH\",\"inputName\":\"ContactsForm_inputName__kI2g6\",\"formBtn\":\"ContactsForm_formBtn__1ekTu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactsList\":\"ContactList_ContactsList__ZKZ8p\",\"ContactsItem\":\"ContactList_ContactsItem__Q1xny\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nimport shortId from 'shortid'; //npm для создания уникальных ID\r\n\r\n//  Возвращает {type: types.ADD, payload: ....}, но нам нужен более сложный тип payload с ID, name, number. В этом случае Prepare Callbacks (это 2 параметр createAction - prepareAction). createAction(types, prepareAction).\r\n// Во 2 параметр createAction - мы передаем функцию, в которой можно подготовить формат payload\r\nconst addContact = createAction('phonebook/add', ({ name, number }) => {\r\n  return {\r\n    payload: {\r\n      id: shortId.generate(), //присваиваем уникальный ID\r\n      name,\r\n      number,\r\n    },\r\n  };\r\n});\r\n\r\nconst deleteContact = createAction('phonebook/delete');\r\n\r\nconst changeFilter = createAction('phonebook/changeFilter');\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { addContact, deleteContact, changeFilter };\r\n","import { createReducer } from '@reduxjs/toolkit'; //для создания редьюсера и рефакторинга кода с помощью функции из toolkit\r\n\r\nimport { combineReducers } from 'redux'; //для композиции редьюсеров, то есть совмещать много в один\r\n\r\n//Data\r\nimport actions from './phonebook-actions'; //actions\r\n\r\n// редьюсер для contacts with Toolkit. В createReducer() - 1 параметр - это начальное значение state; 2 - это объект кейсов, где каждый ключ это тип действия, а значение - это редюсер для этого типа\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload), //берем предыдущий contacts и отфильтровываем все элементы, кроме того у которого id совпадает\r\n});\r\n\r\n// редьюсер для filter with Toolkit. Когда state не нужен, он объявлен, но не используется, вместо него ставим _\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'; //// configureStore - createStore для toolkit; getDefaultMiddleware - список default Middlewares (прослоек).\r\n\r\nimport logger from 'redux-logger'; // прослойка (middleware) при console.log() отображает action (до и после)\r\n\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist'; //позволяет записывать какие-либо данные куда-либо, например в local storage. persistStore - для всего store; persistReducer - для одного редьюсера. Все остальное - для проработки ошибок в консоли\r\n\r\nimport storage from 'redux-persist/lib/storage'; // Это ссылка на local storage для браузера\r\n\r\n// Reducers\r\nimport phonebookReducer from './phonebook-reducer';\r\n\r\n// создаем новый стек прослоек, который вернет список default Middlewares (прослоек), к которому добавляем еще logger =  прослойка (middleware) при console.log() отображает action (до и после) и добавляем его в reducer\r\n\r\nconst middleware = [\r\n  // getDefaultMiddleware - список default Middlewares (прослоек)\r\n  ...getDefaultMiddleware({\r\n    // объект настроек для проработки ошибок в консоли при проверке целостности state, т.е. указываем что нужно игнорировать, чтобы консоль не светилась красными предупреждениями\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  //logger - прослойка (middleware) при console.log() отображает action (до и после). Чтобы ее добавить - устанавливаем и import logger из redux-logger\r\n  logger,\r\n];\r\n\r\n// Создаем конфигурацию persist\r\nconst phonebookPersistConfig = {\r\n  key: 'contacts', // key - ключ, как будет записано в local storage\r\n  storage, ////ссылкa на local storage, которая заимпортирована вверху из библиотеки\r\n  blacklist: ['filter'], // можно добавлять blacklist||whitelist, в которых указывать, что исключить||что включить в local storage\r\n};\r\n\r\n// Для каждого объекта в глобальном state свой отдельный Reducer. И внизу этого файла есть корневой редьюсер (rootReducer), где ключ - это название компонента со state для него, а значение - редьюсер, который отвечает за него.\r\n\r\n//createStore для toolkit -configureStore. DevTools у него уже под капотом. npm redux-devtools-extension можно удалять\r\nconst store = configureStore({\r\n  // параметры configureStore из документации (reducer, devTools,  middleware и есть еще другие опции)\r\n\r\n  // reducer: {}, под капотом уже использует combineReducers  from 'redux' для композиции редьюсеров, то есть совмещать много в один.\r\n  reducer: {\r\n    // тот reducer, который нужен для persist сперва оборачиваем в persistReducer.\r\n    contacts: persistReducer(phonebookPersistConfig, phonebookReducer), //Значение - вызов rootReducer c  persistedReducer, для того чтобы записывать какие-либо данные куда-либо, например в local storage\r\n  },\r\n  middleware, //возвращает список default Middlewares (прослоек), к которому добавляем еще logger =  прослойка (middleware) при console.log() отображает action (до и после)\r\n\r\n  devTools: process.env.NODE_ENV === 'development', // чтобы DevTools были доступны только в разработке. Переменная окружения из node - process.env. NODE_ENV - описывает какой сейчас режим разработки: production || development\r\n});\r\n\r\n//Создаем  persistor - обертка над store, которая при изменении store будет записывать в local storage и обновлять его.\r\nconst persistor = persistStore(store);\r\n\r\n// И export persistor  и store\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { persistor, store };\r\n","import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux'; //для подключения к глобальному store.js\r\n\r\n// Data\r\nimport actions from '../../redux/phonebook-actions';\r\n\r\n// Styles\r\nimport s from './ContactsForm.module.css';\r\n\r\nclass ContactsForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  //ввод данных\r\n  handleChange = event => {\r\n    // console.log(event.currentTarget.value);\r\n\r\n    const { name, value } = event.currentTarget;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // для отправки (submit) формы\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    // console.log(this.state);\r\n\r\n    // деструктуризация свойств из глобального state и store\r\n    const { name, number } = this.state;\r\n    const { contacts, onSubmit } = this.props;\r\n\r\n    //  проверка на возможность добавлять контакты, имена которых уже есть в телефонной книге. При попытке выполнить такое действие выводим alert с предупреждением.\r\n    if (contacts.some(elm => elm.name.toLowerCase() === name.toLowerCase())) {\r\n      return alert(`${name} is already in contacts`);\r\n    }\r\n    if (\r\n      contacts.some(elm => elm.number.toLowerCase() === number.toLowerCase())\r\n    ) {\r\n      return alert(`${number} is already in contacts`);\r\n    }\r\n\r\n    //   во время отправки (submit) формы обращаемся к prop onSubmit для передачи данных из  state (name, number) через mapDispatchToProps\r\n    onSubmit(this.state);\r\n\r\n    // вызов reset для очистки  данных формы,\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className={s.form}>\r\n        <label>\r\n          Name\r\n          <input\r\n            className={s.inputName}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n            required\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n\r\n        <button\r\n          type=\"submit\"\r\n          // disabled={!this.state.name || !this.state.number}\r\n          className={s.formBtn}\r\n        >\r\n          Add Contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactsForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (name, number) => dispatch(actions.addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsForm);\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux'; //для подключения к глобальному store.js\r\n\r\n// Data\r\nimport actions from '../../redux/phonebook-actions';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label>\r\n    Find contacts by name\r\n    <br />\r\n    <input type=\"text\" value={value} onChange={onChange} />\r\n  </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: event => dispatch(actions.changeFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux'; //для подключения к глобальному store.js\r\n\r\n// Data\r\nimport actions from '../../redux/phonebook-actions';\r\n\r\nimport s from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n  return (\r\n    <ul className={s.ContactsList}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={s.ContactsItem}>\r\n          {name}: {number}\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              onDeleteContact(id);\r\n            }}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\n// вычисляемые свойства для фильтрации. Отфильтровываем те contacts, которые includes то, что мы записали в input Фильтр по имени и в ContactList рендерим не все <ContactList\r\n//   contacts={contacts}, а только отфильтрованые, т.е.  contacts={getFilteredContacts}/>\r\nconst getFilteredContacts = (allContacts, filter) => {\r\n  // для чистоты кода выведем filter.toLowerCase() в отдельную переменную\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return allContacts.filter(\r\n    ({ name, number }) =>\r\n      name.toLowerCase().includes(normalizedFilter) ||\r\n      number.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  // phonebook: имя ключа для state в store.js\r\n  // для отображения по фильтру\r\n  contacts: getFilteredContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(actions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React, { Component } from 'react';\n\n// Components\nimport ContactsForm from './components/ContactsForm';\n\nimport Filter from './components/Filter';\n\nimport ContactList from './components/ContactList';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n\n        <ContactsForm />\n\n        <h2>Contacts</h2>\n\n        <Filter />\n\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux'; //Для подключение  глобального store  к Redux. Достаем  Provider  (пакет из react-redux) - компонент, который оборачивает все наше приложение, он ставится поверх App, и он через контекст (контекст - это глобальная переменная) может прокидывать в глубину и на любую вложенность дополнительный функционал.\n\nimport { PersistGate } from 'redux-persist/integration/react'; // используется для реализации redux-persist\n\n// Data\n//  Для передачи Provider в props store, с ссылкой на наше хранилище  сначала импортируем этот файл\nimport store from './redux/store';\n\n// Components\nimport App from './App';\n\n// Styles\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css'; //подключение стилей для normalize\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* Для подключения глобального store к Redux. Достаем Provider (пакет из react-redux) -\n    компонент, который оборачивает все наше приложение, он ставится поверх App,\n    и он через контекст (контекст - это глобальная переменная) может прокидывать\n    в глубину и на любую вложенность дополнительный функционал. Provider в props передаем store (файл которого перед тем import) , с ссылкой на наше хранилище  */}\n    <Provider store={store.store}>\n      {/*PersistGate используется для реализации redux-persist. В props передаем 1)loading, в который можно указать какой-либо preloader; 2) persistor  - ссылка на сам persistor, который заимпортирован из файла store.js*/}\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}